---
import contacts from "../../data/contacts.json";

import BehanceIcon from "../../assets/icons/socials/behance.svg";
import FacebookIcon from "../../assets/icons/socials/facebook.svg";
import GithubIcon from "../../assets/icons/socials/github.svg";
import InstagramIcon from "../../assets/icons/socials/instagram.svg";
import LinkedinIcon from "../../assets/icons/socials/linkedin.svg";
import TelegramIcon from "../../assets/icons/socials/telegram.svg";
import TwitterIcon from "../../assets/icons/socials/twitter.svg";
import VimeoIcon from "../../assets/icons/socials/vimeo.svg";
import YoutubeIcon from "../../assets/icons/socials/youtube.svg";

const iconMap = {
  behance: BehanceIcon,
  facebook: FacebookIcon,
  github: GithubIcon,
  instagram: InstagramIcon,
  linkedin: LinkedinIcon,
  telegram: TelegramIcon,
  twitter: TwitterIcon,
  vimeo: VimeoIcon,
  youtube: YoutubeIcon,
};

// Extract social data with format support
const social = contacts[0]?.social ?? {};

// Helper function to parse contact format
function parseContactValue(value: any): { url: string; label: string } | null {
  if (!value) return null;

  // Handle different formats
  if (typeof value === "string") {
    // Format: "url"
    return { url: value, label: "" };
  }

  if (Array.isArray(value)) {
    if (value.length === 3) {
      // Format: ["title", "url", "display text"]
      return { url: value[1], label: value[2] || value[0] || "" };
    } else if (value.length === 2) {
      // Format: ["url", "display text"]
      return { url: value[0], label: value[1] || "" };
    } else if (value.length === 1) {
      // Format: ["url"]
      return { url: value[0], label: "" };
    }
  }

  return null;
}

// Process social links
const socialList = Object.entries(social)
  .map(([key, value]) => {
    const parsed = parseContactValue(value);
    if (!parsed || !parsed.url) return null;

    const Icon = iconMap[key as keyof typeof iconMap];
    if (!Icon) return null;

    return {
      key,
      url: parsed.url,
      label: parsed.label || key.charAt(0).toUpperCase() + key.slice(1),
      Icon,
    };
  })
  .filter(Boolean);
---

<div class="flex flex-wrap gap-3">
  {
    socialList.map((item) => {
      if (!item) return null;

      return (
        <a
          href={item.url}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={`Visit ${item.label}`}
          title={item.label}
          data-tip={item.label}
          class="tooltip transition-transform duration-200 hover:scale-110"
        >
          <item.Icon class="h-6 w-6 fill-current" />
        </a>
      );
    })
  }
</div>
